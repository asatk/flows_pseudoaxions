FEDHEX 0.1.0
DATE
AUTHOR asatk

began pkg restructuring
 - objects for each service
 - OOP design patterns (strategy, factory, managers, messages) could be
   - implemented in the future
 - currently using strategies for cov mtxs
 - likely may use managers for services
   - pros:
     - can save config for each service
     - can maintain separate states for diff runs
     - encapsulate entire run in object
   - cons:
     - need to make objects for everything rather than function calls
     - explicit specification of all service params
     - need to ensure a robust architecture w/o interference from user
 - will have different models (tf/pyt, RealNVP, MADE, etc)

pretrain
 - get data
train
 - get model
posttrain
 - get results

io has load/save utilities
utils has logging, callbacks


-------------------------------------------------------------------------------

FEDHEX 0.0.0
DATE 2023.07.15
AUTHOR asatk

dont forget to address the issue ab tf 2.12.1/2.11.0 and wrapt 1.14...
 - flows env vs gan env has a huge diff in runtime

mostly removed dependence of methods on defs.py of `utils` modules
needed to change some method calls as a result

-------------------------------------------------------------------------------

FEDHEX 0.0.0
DATE 2023.07.14
AUTHOR asatk

overall trying to reduce dependence on `defs.py` and filenames. trying to make
framework as flexible as possible while remaining stable.

TLDR; all data and information pertaining to training are stored in a single
file. Primitive logging capabilities added. Loading and saving data should be
mostly encapsulated by internal methods - data I/O made much simpler.
Instead of exposing a lot of the behind-the-scenes details of the network and
its model/representation, any interactions with it are currently or in the
process of being packaged behind a simple interface via the `utils` package.

README needs updating for how to use the new methods.
Documentation TODOs need to be completed
general improvement TODOs need completing as well but docu comes first
This update IS STABLE! Until the next bug is found...

analysis_utils.py
> analyze
    updated use of `whiten` and `dewhiten` on to accept the loaded whitening
    constants.
    analysis tools all correctly run.

data_utils.py
> dewhiten
    no longer accepts file, only dict of whitening constants

> makedata
    when generating new data, ALL DATA ARE STORED IN THE SAME FILE IN ONE DICT.
    keywords associated with each thing are:
        "data" the training data generated in this fn's call
        "cond" the conditional data generated in this fn's call
        "whiten_data" the whitening constants for the data
        "whiten_cond" the whitening constants for the conditional data
> whiten
    no longer saves the whitening consants - this is left only to makedata
    whiten some new data (i.e., new labels, new samples)
    returns the whitened data and a dict of the constants (which can be saved)
    no longer accepts file, only dict of whitening constants if they are needed

main.py
> main
    changed arguments for train
    changed names of vars to be more accurate

README
> Getting Started
    added uses for each required library, not just optional ones.

train_utils.py
> train
    method signature now different: no more savemodel/saveloss argument. To
    save a model or losses during training, paths to each respective location
    must be provided. If no location is provided, NOTHING is saved.

utils.py
> print_msg
    added a method to log/print a message at a time. maybe provide logging to a
    file in order to save output more elegantly. maybe will print stack trace
    in a nicer/custom format. can choose log level and message type. fatal
    messages always print stack trace.

-------------------------------------------------------------------------------

FEDHEX 0.0.0
DATE 2023.07.08
AUTHOR asatk

main.py
> main
    parameters updated to reflect the updated signatures of analysis functions

data_utils.py
> makedata
    training samples/data are stored with the suffix "_data.npy" instead
    of the previously-used "_samples.npy" 
    training labels/conditional data are stored with the suffix "_cond.npy"
    instead of the previously-used "_labels.npy"
    whitening constants for data are stored with the suffix "_data_wtn.npy"
    instead of the previously-used "_normdata.npy" 
    whitening constants for conditional data are stored with the suffix
    "_cond_wtn.npy" instead of the previously-used "_normdatacond.npy" 

analysis_example.py
>>>> need to update example to mirror `analysis_utils.py`

analysis_utils.py
> analyze
    included all epoch losses (not exluding the first anymore) because the
    behavior of `plot_losses` has been updated to plot as semilog
> plot_losses
    losses vs epoch plotted as semilog time series. negative losses are
    plotted as their abs. val. but in red. the first turnover point, where
    losses go positive to negative, is plotted as a gray dashed line
>

READEME.md
> Goals
    new section. included goals of project + name of framework: FEDHEX
> Generating Data
    new section. included info on how to generate training data for FEDHEX
>>>> Need to add more info to the new sections
>>>> Need to update `Running an Experiment` section to have more accurate
>>>> instructions on running model.

